name: Build Release Images

on:
  workflow_call:
    inputs:
      PLATFORMS:
        type: string
        default: linux/amd64
        required: false
      POSTGRESQL_VERSION:
        type: string
        default: 13
        required: false
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      GH_TOKEN:
        required: true

concurrency:
  group: ci-build-base-images-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME_GHCR: ghcr.io/${{ github.repository }}
  IMAGE_NAME_DOCKER: deineagenturug/gvm
  IMAGE_NAME_OCIR: fra.ocir.io/fraj3sqdynbw/gvm
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  POSTGRESQL_VERSION: ${{ inputs.POSTGRESQL_VERSION }}

permissions:
  id-token: write
  actions: read
  contents: read
  packages: write
  pull-requests: read
  security-events: write

jobs:

  building_build_images_step_1:
    name: Image latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: ./.checkupdates/
          key: ${{ runner.os }}-gvm-version-check-v2-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-gvm-version-check-v2-

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          driver-opts: |
            image=deineagenturug/buildkit:latest

      - name: Inspect builder
        run: |
          echo "Name        : ${{ steps.buildx.outputs.name }}"
          echo "Endpoint    : ${{ steps.buildx.outputs.endpoint }}"
          echo "Status      : ${{ steps.buildx.outputs.status }}"
          echo "Flags       : ${{ steps.buildx.outputs.flags }}"
          echo "Platforms   : ${{ steps.buildx.outputs.platforms }}"

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Latest Versions
        run: |
          echo 'GREENBONE_RELEASES<<EOF' >> $GITHUB_ENV
          cat ./.checkupdates/latest_version | sed 's/=v/=/g' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          cat ./.checkupdates/build_time >> $GITHUB_ENV

      - name: Build and push Docker image latest
        uses: docker/build-push-action@v2
        with:
          context: ./GVMDocker/
          platforms: ${{ inputs.PLATFORMS }}
          push: true
          cache-from: |
            ${{ env.IMAGE_NAME_DOCKER }}:latest
          file: ./GVMDocker/Dockerfiles/release_latest.Dockerfile
          tags: |
            ${{ env.IMAGE_NAME_DOCKER }}:latest
            ${{ env.IMAGE_NAME_DOCKER }}:${{ env.BUILD_VERSION }}
          labels: |
            ${{ env.GREENBONE_RELEASES }}
            POSTGRESQL_VERSION=${{ env.POSTGRESQL_VERSION }}
          build-args: |
            ${{ env.GREENBONE_RELEASES }}
            POSTGRESQL_VERSION=${{ env.POSTGRESQL_VERSION }}
            BUILDKIT_INLINE_CACHE=1

  building_build_images_step_2:
    name: Image latest-${{ matrix.IMAGE }}
    needs: building_build_images_step_1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        IMAGE:
          - full
          - data

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: ./.checkupdates/
          key: ${{ runner.os }}-gvm-version-check-v2-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-gvm-version-check-v2-

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          driver-opts: |
            image=deineagenturug/buildkit:latest

      - name: Inspect builder
        run: |
          echo "Name        : ${{ steps.buildx.outputs.name }}"
          echo "Endpoint    : ${{ steps.buildx.outputs.endpoint }}"
          echo "Status      : ${{ steps.buildx.outputs.status }}"
          echo "Flags       : ${{ steps.buildx.outputs.flags }}"
          echo "Platforms   : ${{ steps.buildx.outputs.platforms }}"

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Latest Versions
        run: |
          echo 'GREENBONE_RELEASES<<EOF' >> $GITHUB_ENV
          cat ./.checkupdates/latest_version | sed 's/=v/=/g' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          cat ./.checkupdates/build_time >> $GITHUB_ENV

      - name: Build and push Docker image latest-${{ matrix.IMAGE }}
        uses: docker/build-push-action@v2
        with:
          context: ./GVMDocker/
          platforms: ${{ inputs.PLATFORMS }}
          push: true
          cache-from: |
            ${{ env.IMAGE_NAME_DOCKER }}:latest-${{ matrix.IMAGE }}
          file: ./GVMDocker/Dockerfiles/release_latest-${{ matrix.IMAGE }}.Dockerfile
          tags: |
            ${{ env.IMAGE_NAME_DOCKER }}:latest-${{ matrix.IMAGE }}
            ${{ env.IMAGE_NAME_DOCKER }}:${{ env.BUILD_VERSION }}-${{ matrix.IMAGE }}
          labels: |
            ${{ env.GREENBONE_RELEASES }}
            POSTGRESQL_VERSION=${{ env.POSTGRESQL_VERSION }}
          build-args: |
            ${{ env.GREENBONE_RELEASES }}
            POSTGRESQL_VERSION=${{ env.POSTGRESQL_VERSION }}
            BUILDKIT_INLINE_CACHE=1

  building_build_images_step_3:
    name: Image latest-data-full
    needs: building_build_images_step_2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: ./.checkupdates/
          key: ${{ runner.os }}-gvm-version-check-v2-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-gvm-version-check-v2-

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          driver-opts: |
            image=deineagenturug/buildkit:latest

      - name: Inspect builder
        run: |
          echo "Name        : ${{ steps.buildx.outputs.name }}"
          echo "Endpoint    : ${{ steps.buildx.outputs.endpoint }}"
          echo "Status      : ${{ steps.buildx.outputs.status }}"
          echo "Flags       : ${{ steps.buildx.outputs.flags }}"
          echo "Platforms   : ${{ steps.buildx.outputs.platforms }}"

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Latest Versions
        run: |
          echo 'GREENBONE_RELEASES<<EOF' >> $GITHUB_ENV
          cat ./.checkupdates/latest_version | sed 's/=v/=/g' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          cat ./.checkupdates/build_time >> $GITHUB_ENV

      - name: Build and push Docker image latest-data-full
        uses: docker/build-push-action@v2
        with:
          context: ./GVMDocker/
          platforms: ${{ inputs.PLATFORMS }}
          push: true
          cache-from: |
            ${{ env.IMAGE_NAME_DOCKER }}:latest-data-full
          file: ./GVMDocker/Dockerfiles/release_latest-data-full.Dockerfile
          tags: |
            ${{ env.IMAGE_NAME_DOCKER }}:latest-data-full
            ${{ env.IMAGE_NAME_DOCKER }}:${{ env.BUILD_VERSION }}-data-full
          labels: |
            ${{ env.GREENBONE_RELEASES }}
            POSTGRESQL_VERSION=${{ env.POSTGRESQL_VERSION }}
          build-args: |
            ${{ env.GREENBONE_RELEASES }}
            POSTGRESQL_VERSION=${{ env.POSTGRESQL_VERSION }}
            BUILDKIT_INLINE_CACHE=1
